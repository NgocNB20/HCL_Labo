########### 変更指標 ###########
## デバッグモード
## エラー画面（error.html）でスタックトレースを表示する／しない（true/false）
debug: false
########### 変更指標 ###########
########### サーバー設定 ###########
server:
  tomcat:
    # プロキシサーバーの背後で実行する時にHTTPSを有効にする
    # 特にSpring-Securityによるリダイレクト時にこちらの設定がないと上手く動けない
    remoteip:
      remote-ip-header: x-forwarded-for
      protocol-header: x-forwarded-proto
  # サーバポート
  port: ${SERVER_PORT:8480}
  servlet:
    # セッションタイムアウト（分）
    # PCIDSS準拠対象外の場合は15分でなくてもOK
    session:
      timeout: 15m
    # URL上のコンテキストパス
    context-path: ${CONTEXT_PATH:/price-planning-service}
########### サーバー設定 ###########
########### Spring設定 ###########
spring:
  servlet:
    # ファイル（CSV・ZIP等）アップロード時の制御
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  mvc:
    async:
      request-timeout: -1
  ### Thymeleaf用プロパティファイル
  # テンプレートキャッシュは行わない（html修正が即画面反映される）
  thymeleaf:
    cache: false
    render-hidden-markers-before-checkboxes: true
  datasource:
    driver-class-name: org.postgresql.Driver
    hikari:
      # ※connection Poolによって確保されたconnectionの最大アイドル時間
      idle-timeout: 600000
      # 読み取り専用モードでオープンするか否か（true=する／false=しない）
      read-only: false
      # connection Poolで使用する最大のconnection数
      maximum-pool-size: 15
      # connection Poolによって確保されたconnectionの最大Life Time
      max-lifetime: 1800000
      # ※connectionが接続される時のtimeout out時間
      connection-timeout: 30000
      # コネクション処理終了時、トランザクションを自動でコミットするか否か（true=する／false=しない）
      auto-commit: true
      # 新しいconnectionが生成され、Poolに追加される前に実行されるSQL query
      connection-init-sql: SELECT 1
      # connection Poolで維持する最小限のconnection数
      minimum-idle: 1
    url: jdbc:postgresql://${DATABASE_HOST:localhost}:${POSTGRESQL_PORT:5432}/${POSTGRESQL_NAME:hclabo_price_planning}
    username: ${POSTGRESQL_USER:hclabo_price_planning}
    password: ${POSTGRESQL_PASS:password}
  # Rabbit Message Queue configuration
  rabbitmq:
    username: ${RABBITMQ_USER:rabbitmq}
    password: ${RABBITMQ_PASS:rabbitmq}
    host: ${DATABASE_HOST:localhost}
    virtual-host: ${RABBITMQ_VIRTUAL_HOST:}
    port: ${RABBITMQ_PORT:5672}
  sleuth:
    enabled: true
    sampler:
      probability: 1.0
      rate: 10
    async:
      enabled: false
  zipkin:
    enabled: false
    sender:
      type: web
    base-url:
# Spring Boot Actuator の必要なプロパティ定義
# デフォルトで/infoと/healthしか公開されない
# すべてのエンドポイントを公開したい場合、以下の設定が必要
management:
  endpoints:
    web:
      exposure:
        include: health, info
########### Spring設定 ###########
###########データソース関連設定 ###########
# Doma用設定
doma:
  sql-file-repository: NO_CACHE
  dialect: postgres
  fetch-size: 100
###########データソース関連設定 ###########
########### HIT-MALL独自設定 ###########
#
# 各サービスのベースパス定義
#
# 物流サービス
base-path-logistic-service: ${BASE_PATH_LOGISTIC_SERVICE}
# 受注サービス
base-path-order-service: ${BASE_PATH_ORDER_SERVICE}
# 決済サービス
base-path-payment-service: ${BASE_PATH_PAYMENT_SERVICE}
# 商品サービス
base-path-product-service: ${BASE_PATH_PRODUCT_SERVICE}
# プロモーションサービス
base-path-promotion-service: ${BASE_PATH_PROMOTION_SERVICE}
# ユーザーサービス
base-path-user-service: ${BASE_PATH_USER_SERVICE}
# 兵庫臨床カスタマイズサービス
base-path-customize-service: ${BASE_PATH_CUSTOMIZE_SERVICE}
queue:
  # クリアバッチ
  clear:
    direct: price-planning-clear-direct
    routing: price-planning-clear-routing
#
# Log用プロパティファイル
#
logging:
  config: classpath:config/hitmall/log/logback-pr.xml
coupon:
  code:
    ## クーポンコードが再利用不可能期間（日）
    ## クーポン終了後、そのクーポンが利用できない期間を設定する。
    ## 期間を短くした場合、集計誤差が発生する可能性がある。
    ## クーポンコードとして利用可能な文字列
    usable:
      character: abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_
    cant:
      recycle:
        term: '0'
## クーポンコード自動生成設定
##　自動生成するクーポンコードの桁数
auto:
  generation:
    coupon:
      code:
        length: '10'
##############
period-time-clear-batch: '70'
########### HIT-MALL独自設定 ###########