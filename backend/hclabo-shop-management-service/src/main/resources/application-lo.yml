########### 変更指標 ###########
## デバッグモード
## エラー画面（error.html）でスタックトレースを表示する／しない（true/false）
## エラーメッセージにエラーコードを含める判定にも利用
debug: false
########### 変更指標 ###########
########### サーバー設定 ###########
server:
  tomcat:
    # プロキシサーバーの背後で実行する時にHTTPSを有効にする
    # 特にSpring-Securityによるリダイレクト時にこちらの設定がないと上手く動けない
    remoteip:
      protocol-header: x-forwarded-proto
      remote-ip-header: x-forwarded-for
  ### Spring Web/MVC用プロパティファイル
  # --------------------
  # サーバポート
  # --------------------
  port: ${SERVER_PORT:8980}
  servlet:
    # URL上のコンテキストパス
    context-path: ${CONTEXT_PATH:/shop-management-service}
    session:
      # サーブレットセッションタイムアウト
      timeout: 15m
########### サーバー設定 ###########
########### Spring設定 ###########
spring:
  ### Spring JDBC用プロパティファイル
  # ファイル（CSV・ZIP等）アップロード時の制御
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  # 非同期リクエスト処理がタイムアウトするまでの時間
  # DEBUGのために制限していないが、本番環境では、1～３分などを予想している
  # spring.mvc.async.request-timeout=3m
  mvc:
    async:
      request-timeout: -1
  # 新デザイン組み込を実施する際にThymeleaf上のcheckboxが上手くレンダリングできない事象を解決するための設定
  thymeleaf:
    cache: false
    render-hidden-markers-before-checkboxes: true
  # Connect To PostgreSQL Setting
  # ------------------------------
  # DB接続基本設定
  # ------------------------------
  datasource:
    hikari:
      # コネクション処理終了時、トランザクションを自動でコミットするか否か（true=する／false=しない）
      auto-commit: true
      # 新しいconnectionが生成され、Poolに追加される前に実行されるSQL query
      connection-init-sql: SELECT 1
      # コネクションタイムアウト（ミリ秒）
      # ※connectionが接続される時のtimeout out時間
      connection-timeout: 30000
      # ------------------------------
      # コネクションタイム設定
      # ------------------------------
      # アイドルタイムアウト（ミリ秒）
      # ※connection Poolによって確保されたconnectionの最大アイドル時間
      idle-timeout: 600000
      # コネクション 最大ライフタイム（ミリ秒）
      # onnection Poolによって確保されたconnectionの最大Life Time
      max-lifetime: 1800000
      # Connection Pool Setting（hikariCP）
      # ------------------------------
      # コネクション数設定
      # ------------------------------
      # connection Poolで使用する最大のconnection数
      maximum-pool-size: 10
      # connection Poolで維持する最小限のconnection数
      minimum-idle: 1
      ### Spring JDBC用プロパティファイル
      # Connect To PostgreSQL Setting
      # ------------------------------
      # その他設定
      # ------------------------------
      # 読み取り専用モードでオープンするか否か（true=する／false=しない）
      read-only: false
    ### Spring JDBC用プロパティファイル
    # Connect To PostgreSQL Setting
    # ------------------------------
    # DB接続基本設定
    # ------------------------------
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${DATABASE_HOST:localhost}:${POSTGRESQL_PORT:5432}/${POSTGRESQL_NAME:hclabo_shop_management}
    username: ${POSTGRESQL_USER:hclabo_shop_management}
    password: ${POSTGRESQL_PASS:password}
  sleuth:
    # ログにユニークIDのコンフィグレーション
    async:
      enabled: false
    enabled: true
    # Zipkin（分散ログトレーシングのツール）の導入
    sampler:
      probability: 1.0
      rate: 10
  # Zipkin（分散ログトレーシングのツール）の導入
  zipkin:
    enabled: true
    base-url: http://localhost:9411/
    sender:
      type: web
# Spring Boot Actuator の必要なプロパティ定義
# デフォルトで/infoと/healthしか公開されない
# すべてのエンドポイントを公開したい場合、以下の設定が必要
management:
  endpoints:
    web:
      exposure:
        include: '*'
## 補完するURL
# アプリケーション
app:
  complement:
    url: /admin
########### Spring設定 ###########
###########データソース関連設定 ###########
# Doma用設定
doma:
  dialect: postgres
  fetch-size: 100
  sql-file-repository: NO_CACHE
###########データソース関連設定 ###########
########### HIT-MALL独自設定 ###########
#
# Log用プロパティファイル
#
logging:
  config: classpath:config/hitmall/log/logback-lo.xml
########### HIT-MALL独自設定 ###########