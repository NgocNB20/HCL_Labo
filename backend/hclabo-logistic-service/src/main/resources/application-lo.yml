########### 変更指標 ###########
## デバッグモード
## エラー画面（error.html）でスタックトレースを表示する／しない（true/false）
debug: false
########### 変更指標 ###########
########### サーバー設定 ###########
server:
  # プロキシサーバーの背後で実行する時にHTTPSを有効にする
  # 特にSpring-Securityによるリダイレクト時にこちらの設定がないと上手く動けない
  tomcat:
    remoteip:
      protocol-header: x-forwarded-proto
      remote-ip-header: x-forwarded-for
  # サーバポート
  port: ${SERVER_PORT:8680}
  servlet:
    # URL上のコンテキストパス
    context-path: ${CONTEXT_PATH:/logistic-service}
    session:
      timeout: 15m
########### サーバー設定 ###########
########### Spring設定 ###########
spring:
  servlet:
    # ファイル（CSV・ZIP等）アップロード時の制御
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  mvc:
    async:
      # 非同期リクエスト処理がタイムアウトするまでの時間
      # DEBUGのために制限していないが、本番環境では、1～３分などを予想している
      request-timeout: -1
  ### Thymeleaf用プロパティファイル
  # テンプレートキャッシュは行わない（html修正が即画面反映される）
  thymeleaf:
    cache: false
    render-hidden-markers-before-checkboxes: true
  datasource:
    driver-class-name: org.postgresql.Driver
    hikari:
      # コネクション処理終了時、トランザクションを自動でコミットするか否か（true=する／false=しない）
      auto-commit: true
      # 新しいconnectionが生成され、Poolに追加される前に実行されるSQL query
      connection-init-sql: SELECT 1
      # ※connectionが接続される時のtimeout out時間
      connection-timeout: 30000
      # ※connection Poolによって確保されたconnectionの最大アイドル時間
      idle-timeout: 600000
      # コネクション 最大ライフタイム（ミリ秒）
      # onnection Poolによって確保されたconnectionの最大Life Time
      max-lifetime: 1800000
      # connection Poolで使用する最大のconnection数
      maximum-pool-size: 15
      # connection Poolで維持する最小限のconnection数
      minimum-idle: 1
      # 読み取り専用モードでオープンするか否か（true=する／false=しない）
      read-only: false
    # 接続情報
    url: jdbc:postgresql://${DATABASE_HOST:localhost}:${POSTGRESQL_PORT:5432}/${POSTGRESQL_NAME:hclabo_logistic}
    username: ${POSTGRESQL_USER:hclabo_logistic}
    password: ${POSTGRESQL_PASS:password}
  # Rabbit MQ config
  rabbitmq:
    username: ${RABBITMQ_USER:rabbitmq}
    password: ${RABBITMQ_PASS:rabbitmq}
    host: ${DATABASE_HOST:localhost}
    virtual-host: ${RABBITMQ_VIRTUAL_HOST:}
    port: ${RABBITMQ_PORT:5672}
  sleuth:
    async:
      enabled: false
    enabled: true
    sampler:
      probability: 1.0
      rate: 10
  zipkin:
    enabled: true
    base-url: http://localhost:9411/
    sender:
      type: web
# Spring Boot Actuator の必要なプロパティ定義
# デフォルトで/infoと/healthしか公開されない
# すべてのエンドポイントを公開したい場合、以下の設定が必要
management:
  endpoints:
    web:
      exposure:
        include: '*'
########### Spring設定 ###########
###########データソース関連設定 ###########
# Doma用設定
doma:
  dialect: postgres
  fetch-size: 100
  sql-file-repository: NO_CACHE
###########データソース関連設定 ###########
########### HIT-MALL独自設定 ###########
# 各サービスのベースパス定義
#
# 決済サービス
base-path-payment-service: http://localhost:18080/payment-service
# 商品サービス
base-path-product-service: http://localhost:18080/product-service
# プロモーションサービス
base-path-promotion-service: http://localhost:18080/promotion-service
# ユーザーサービス
base-path-user-service: http://localhost:18080/user-service
# 兵庫臨床カスタマイズサービス
base-path-customize-service: http://localhost:18080/customize-service
queue:
  # クリアバッチ
  clear:
    direct: logistic-clear-direct
    routing: logistic-clear-routing
  # 在庫解放
  inventoryrelease:
    direct: payment-inventory-release-direct
    routing: payment-inventory-release-routing
  # 事業所郵便番号自動更新
  officezipcodeupdate:
    direct: logistic-officezipcode-update-direct
    routing: logistic-officezipcode-update-routing
  #郵便番号自動更新
  zipcodeupdate:
    direct: zipcode-update-direct
    routing: zipcode-update-routing
#
# Log用プロパティファイル
#
logging:
  config: classpath:config/hitmall/log/logback-lo.xml
## 出荷済み商品在庫戻し可否フラグ
## 0 = 在庫戻しなし　　1 = 在庫戻しあり
shipedGoodsStockReturn: 0
# 商品配送準備日数
# お届け希望日プルダウンに反映する
delivery:
  number:
    days: '0'
# 非同期処理対象ファイル出力パス
batch:
  file:
    path: C:/var/home/hclabo/common/tmp
##############
period-time-clear-batch: '70'
########### HIT-MALL独自設定 ###########
